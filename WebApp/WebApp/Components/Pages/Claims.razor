@page "/claims"
@rendermode InteractiveAuto
@inject AuthenticationStateProvider authenticationProvider

<h1>ClaimsPrincipal Data</h1>

<p>@authMessage</p>

@if (claims.Count() > 0)
{
    <ul>
        @foreach (var claim in claims)
        {
            <li>@claim.Type: @claim.Value</li>
        }
    </ul>
}

<p>@surname</p>

@code {
    private string? authMessage;
    private string? surname;
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await authenticationProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity is not null && user.Identity.IsAuthenticated)
            {
                authMessage = $"{user.Identity.Name} is authenticated.";
                claims = user.Claims;
                surname = user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value;
            }
            else
            {
                authMessage = "The user is NOT authenticated.";
            }

            StateHasChanged();
        }
    }
}