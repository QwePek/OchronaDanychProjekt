@using Blazored.LocalStorage
@rendermode InteractiveServer
@inject ILocalStorageService LocalStorage
@implements IAsyncDisposable

<section>
    <button class="theme-toggle @toggleClass"
            type="button"
            title="Toggle theme"
            aria-label="Toggle theme" @onclick="() => SwitchTheme()">
        <svg xmlns="http://www.w3.org/2000/svg"
             aria-hidden="true"
             width="2.5em"
             height="2.5em"
             fill="currentColor"
             stroke-linecap="round"
             class="theme-toggle__classic"
             viewBox="0 0 32 32">
            <clipPath id="theme-toggle__classic__cutout">
                <path d="M0-5h30a1 1 0 0 0 9 13v24H0Z" />
            </clipPath>
            <g clip-path="url(#theme-toggle__classic__cutout)">
                <circle cx="16" cy="16" r="9.34" />
                <g stroke="currentColor" stroke-width="1.5">
                    <path d="M16 5.5v-4" />
                    <path d="M16 30.5v-4" />
                    <path d="M1.5 16h4" />
                    <path d="M26.5 16h4" />
                    <path d="m23.4 8.6 2.8-2.8" />
                    <path d="m5.7 26.3 2.9-2.9" />
                    <path d="m5.8 5.8 2.8 2.8" />
                    <path d="m23.4 23.4 2.9 2.9" />
                </g>
            </g>
        </svg>
    </button>

@*     <button @onclick="() => SetTheme(DisplayMode.Light)">Light</button>
    <button @onclick="() => SetTheme(DisplayMode.Dark)">Dark</button>
    <button @onclick="() => SetTheme(DisplayMode.System)">System</button> *@
</section>

@code {
    string toggleClass = "";
    public enum DisplayMode
    {
        Light,
        Dark,
        System
    }

    private IJSObjectReference? module;

    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/themeSelector.js");

            string k = await LocalStorage.GetItemAsStringAsync("Theme");

            if (k == "dark")
                await SetTheme(DisplayMode.Dark);
            else if (k == "light")
                await SetTheme(DisplayMode.Light);
            else
                await SetTheme(DisplayMode.System);
        }

    }

    public async Task SetTheme(DisplayMode displayMode)
    {
        if (module is not null)
        {
            if (displayMode == DisplayMode.Dark)
                toggleClass = "theme-toggle--toggled";
            else
                toggleClass = "";

            await LocalStorage.SetItemAsStringAsync("Theme", displayMode.ToString().ToLower());
            await module.InvokeVoidAsync("onDisplayModeChanged", $"{displayMode.ToString().ToLower()}");
        }
    }

    public async Task SwitchTheme()
    {
        if (module is not null)
        {
            DisplayMode displayMode = DisplayMode.Dark;
            string k = await LocalStorage.GetItemAsStringAsync("Theme");

            if (k == "dark")
                displayMode = DisplayMode.Light;

            if (displayMode == DisplayMode.Dark)
                toggleClass = "theme-toggle--toggled";
            else
                toggleClass = "";

            await LocalStorage.SetItemAsStringAsync("Theme", displayMode.ToString().ToLower());
            await module.InvokeVoidAsync("onDisplayModeChanged", $"{displayMode.ToString().ToLower()}");
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
}